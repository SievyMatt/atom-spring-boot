"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_languageclient_commons_1 = require("@pivotal-tools/atom-languageclient-commons");
const atom_languageclient_1 = require("atom-languageclient");
const BOOT_HINT_GUTTER_NAME = 'boot-hint-gutter';
const DECORATION_OPTIONS = {
    type: 'highlight',
    class: 'boot-hint',
    gutterName: BOOT_HINT_GUTTER_NAME
};
class BootStsAdapter extends atom_languageclient_commons_1.StsAdapter {
    constructor() {
        super();
    }
    onHighlight(params) {
        this.findEditors(params.doc.uri).forEach(editor => this.markHintsForEditor(editor, params.ranges));
    }
    markHintsForEditor(editor, ranges) {
        editor.getDecorations(DECORATION_OPTIONS).map(decoration => decoration.getMarker()).forEach(m => m.destroy());
        if (Array.isArray(ranges)) {
            ranges.forEach(range => this.createHintMarker(editor, range));
        }
        const gutter = editor.gutterWithName(BOOT_HINT_GUTTER_NAME);
        if (gutter) {
            if (!ranges || !ranges.length) {
                gutter.hide();
            }
            else if (!gutter.isVisible()) {
                gutter.show();
            }
        }
    }
    createHintMarker(editor, range) {
        // Create marker model
        const marker = editor.markBufferRange(atom_languageclient_1.Convert.lsRangeToAtomRange(range));
        // Marker around the text in the editor
        editor.decorateMarker(marker, DECORATION_OPTIONS);
        // Marker in the diagnostic gutter
        let gutter = editor.gutterWithName(BOOT_HINT_GUTTER_NAME);
        if (!gutter) {
            gutter = editor.addGutter({
                name: BOOT_HINT_GUTTER_NAME,
                visible: false,
            });
        }
        const iconElement = document.createElement('span');
        iconElement.setAttribute('class', 'gutter-boot-hint');
        gutter.decorateMarker(marker, { item: iconElement });
    }
}
exports.BootStsAdapter = BootStsAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdC1zdHMtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9ib290LXN0cy1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNEZBQXVGO0FBQ3ZGLDZEQUE0QztBQUk1QyxNQUFNLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDO0FBRWpELE1BQU0sa0JBQWtCLEdBQXNCO0lBQzFDLElBQUksRUFBRSxXQUFXO0lBQ2pCLEtBQUssRUFBRSxXQUFXO0lBQ2xCLFVBQVUsRUFBRSxxQkFBcUI7Q0FDcEMsQ0FBQztBQUVGLG9CQUE0QixTQUFRLHdDQUFVO0lBRTFDO1FBQ0ksS0FBSyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQXVCO1FBQy9CLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxNQUFrQixFQUFFLE1BQWU7UUFDMUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzlHLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ2pFO1FBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzVELElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQzNCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNqQjtpQkFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dCQUM1QixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDakI7U0FDSjtJQUNMLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxNQUFrQixFQUFFLEtBQVk7UUFDckQsc0JBQXNCO1FBQ3RCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsNkJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXpFLHVDQUF1QztRQUN2QyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBRWxELGtDQUFrQztRQUNsQyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO2dCQUN0QixJQUFJLEVBQUUscUJBQXFCO2dCQUMzQixPQUFPLEVBQUUsS0FBSzthQUNqQixDQUFDLENBQUM7U0FDTjtRQUNELE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkQsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUN0RCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FFSjtBQTdDRCx3Q0E2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0c0FkYXB0ZXIsIEhpZ2hsaWdodFBhcmFtc30gZnJvbSAnQHBpdm90YWwtdG9vbHMvYXRvbS1sYW5ndWFnZWNsaWVudC1jb21tb25zJztcbmltcG9ydCB7Q29udmVydH0gZnJvbSAnYXRvbS1sYW5ndWFnZWNsaWVudCc7XG5pbXBvcnQgeyBSYW5nZSB9IGZyb20gJ3ZzY29kZS1sYW5ndWFnZXNlcnZlci1wcm90b2NvbCc7XG5pbXBvcnQge1RleHRFZGl0b3IsIERlY29yYXRpb25PcHRpb25zIH0gZnJvbSAnYXRvbSc7XG5cbmNvbnN0IEJPT1RfSElOVF9HVVRURVJfTkFNRSA9ICdib290LWhpbnQtZ3V0dGVyJztcblxuY29uc3QgREVDT1JBVElPTl9PUFRJT05TOiBEZWNvcmF0aW9uT3B0aW9ucyA9IHtcbiAgICB0eXBlOiAnaGlnaGxpZ2h0JyxcbiAgICBjbGFzczogJ2Jvb3QtaGludCcsXG4gICAgZ3V0dGVyTmFtZTogQk9PVF9ISU5UX0dVVFRFUl9OQU1FXG59O1xuXG5leHBvcnQgY2xhc3MgQm9vdFN0c0FkYXB0ZXIgZXh0ZW5kcyBTdHNBZGFwdGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIG9uSGlnaGxpZ2h0KHBhcmFtczogSGlnaGxpZ2h0UGFyYW1zKSB7XG4gICAgICAgIHRoaXMuZmluZEVkaXRvcnMocGFyYW1zLmRvYy51cmkpLmZvckVhY2goZWRpdG9yID0+IHRoaXMubWFya0hpbnRzRm9yRWRpdG9yKGVkaXRvciwgcGFyYW1zLnJhbmdlcykpO1xuICAgIH1cblxuICAgIHByaXZhdGUgbWFya0hpbnRzRm9yRWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvciwgcmFuZ2VzOiBSYW5nZVtdKSB7XG4gICAgICAgIGVkaXRvci5nZXREZWNvcmF0aW9ucyhERUNPUkFUSU9OX09QVElPTlMpLm1hcChkZWNvcmF0aW9uID0+IGRlY29yYXRpb24uZ2V0TWFya2VyKCkpLmZvckVhY2gobSA9PiBtLmRlc3Ryb3koKSk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJhbmdlcykpIHtcbiAgICAgICAgICAgIHJhbmdlcy5mb3JFYWNoKHJhbmdlID0+IHRoaXMuY3JlYXRlSGludE1hcmtlcihlZGl0b3IsIHJhbmdlKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ3V0dGVyID0gZWRpdG9yLmd1dHRlcldpdGhOYW1lKEJPT1RfSElOVF9HVVRURVJfTkFNRSk7XG4gICAgICAgIGlmIChndXR0ZXIpIHtcbiAgICAgICAgICAgIGlmICghcmFuZ2VzIHx8ICFyYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZ3V0dGVyLmhpZGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWd1dHRlci5pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgICAgIGd1dHRlci5zaG93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUhpbnRNYXJrZXIoZWRpdG9yOiBUZXh0RWRpdG9yLCByYW5nZTogUmFuZ2UpIHtcbiAgICAgICAgLy8gQ3JlYXRlIG1hcmtlciBtb2RlbFxuICAgICAgICBjb25zdCBtYXJrZXIgPSBlZGl0b3IubWFya0J1ZmZlclJhbmdlKENvbnZlcnQubHNSYW5nZVRvQXRvbVJhbmdlKHJhbmdlKSk7XG5cbiAgICAgICAgLy8gTWFya2VyIGFyb3VuZCB0aGUgdGV4dCBpbiB0aGUgZWRpdG9yXG4gICAgICAgIGVkaXRvci5kZWNvcmF0ZU1hcmtlcihtYXJrZXIsIERFQ09SQVRJT05fT1BUSU9OUyk7XG5cbiAgICAgICAgLy8gTWFya2VyIGluIHRoZSBkaWFnbm9zdGljIGd1dHRlclxuICAgICAgICBsZXQgZ3V0dGVyID0gZWRpdG9yLmd1dHRlcldpdGhOYW1lKEJPT1RfSElOVF9HVVRURVJfTkFNRSk7XG4gICAgICAgIGlmICghZ3V0dGVyKSB7XG4gICAgICAgICAgICBndXR0ZXIgPSBlZGl0b3IuYWRkR3V0dGVyKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBCT09UX0hJTlRfR1VUVEVSX05BTUUsXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpY29uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgaWNvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdndXR0ZXItYm9vdC1oaW50Jyk7XG4gICAgICAgIGd1dHRlci5kZWNvcmF0ZU1hcmtlcihtYXJrZXIsIHtpdGVtOiBpY29uRWxlbWVudH0pO1xuICAgIH1cblxufSJdfQ==