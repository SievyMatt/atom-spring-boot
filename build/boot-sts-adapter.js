"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_languageclient_commons_1 = require("@pivotal-tools/atom-languageclient-commons");
const atom_languageclient_1 = require("atom-languageclient");
const BOOT_DATA_MARKER_TYPE = 'BootApp-Hint';
const BOOT_HINT_GUTTER_NAME = 'boot-hint-gutter';
class BootStsAdapter extends atom_languageclient_commons_1.StsAdapter {
    constructor() {
        super();
    }
    onHighlight(params) {
        this.findEditors(params.doc.uri).forEach(editor => this.markHintsForEditor(editor, params.ranges));
    }
    markHintsForEditor(editor, ranges) {
        editor.findMarkers(BOOT_DATA_MARKER_TYPE).forEach(m => m.destroy());
        if (Array.isArray(ranges)) {
            ranges.forEach(range => this.createHintMarker(editor, range));
        }
        const gutter = editor.gutterWithName(BOOT_HINT_GUTTER_NAME);
        if (gutter) {
            if (!ranges || !ranges.length) {
                gutter.hide();
            }
            else if (!gutter.isVisible()) {
                gutter.show();
            }
        }
    }
    createHintMarker(editor, range) {
        // Create marker model
        const marker = editor.markBufferRange(atom_languageclient_1.Convert.lsRangeToAtomRange(range), BOOT_DATA_MARKER_TYPE);
        // Marker around the text in the editor
        editor.decorateMarker(marker, {
            type: 'highlight',
            class: 'boot-hint'
        });
        // Marker in the diagnostic gutter
        let gutter = editor.gutterWithName(BOOT_HINT_GUTTER_NAME);
        if (!gutter) {
            gutter = editor.addGutter({
                name: BOOT_HINT_GUTTER_NAME,
                visible: false,
            });
        }
        const iconElement = document.createElement('span');
        iconElement.setAttribute('class', 'gutter-boot-hint');
        gutter.decorateMarker(marker, { item: iconElement });
    }
}
exports.BootStsAdapter = BootStsAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdC1zdHMtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9ib290LXN0cy1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNEZBQXVGO0FBQ3ZGLDZEQUE0QztBQUk1QyxNQUFNLHFCQUFxQixHQUFRLGNBQWMsQ0FBQztBQUNsRCxNQUFNLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDO0FBRWpELG9CQUE0QixTQUFRLHdDQUFVO0lBRTFDO1FBQ0ksS0FBSyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQXVCO1FBQy9CLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxNQUFrQixFQUFFLE1BQWU7UUFDMUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN2QixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ2pFO1FBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzVELElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7Z0JBQzNCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNqQjtpQkFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dCQUM1QixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDakI7U0FDSjtJQUNMLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxNQUFrQixFQUFFLEtBQVk7UUFDckQsc0JBQXNCO1FBQ3RCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsNkJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1FBRWhHLHVDQUF1QztRQUN2QyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUMxQixJQUFJLEVBQUUsV0FBVztZQUNqQixLQUFLLEVBQUUsV0FBVztTQUNyQixDQUFDLENBQUM7UUFFSCxrQ0FBa0M7UUFDbEMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxNQUFNLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztnQkFDdEIsSUFBSSxFQUFFLHFCQUFxQjtnQkFDM0IsT0FBTyxFQUFFLEtBQUs7YUFDakIsQ0FBQyxDQUFDO1NBQ047UUFDRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELFdBQVcsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDdEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBQ0o7QUEvQ0Qsd0NBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdHNBZGFwdGVyLCBIaWdobGlnaHRQYXJhbXN9IGZyb20gJ0BwaXZvdGFsLXRvb2xzL2F0b20tbGFuZ3VhZ2VjbGllbnQtY29tbW9ucyc7XG5pbXBvcnQge0NvbnZlcnR9IGZyb20gJ2F0b20tbGFuZ3VhZ2VjbGllbnQnO1xuaW1wb3J0IHsgUmFuZ2UgfSBmcm9tICd2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItcHJvdG9jb2wnO1xuaW1wb3J0IHtUZXh0RWRpdG9yfSBmcm9tICdhdG9tJztcblxuY29uc3QgQk9PVF9EQVRBX01BUktFUl9UWVBFOiBhbnkgPSAnQm9vdEFwcC1IaW50JztcbmNvbnN0IEJPT1RfSElOVF9HVVRURVJfTkFNRSA9ICdib290LWhpbnQtZ3V0dGVyJztcblxuZXhwb3J0IGNsYXNzIEJvb3RTdHNBZGFwdGVyIGV4dGVuZHMgU3RzQWRhcHRlciB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBvbkhpZ2hsaWdodChwYXJhbXM6IEhpZ2hsaWdodFBhcmFtcykge1xuICAgICAgICB0aGlzLmZpbmRFZGl0b3JzKHBhcmFtcy5kb2MudXJpKS5mb3JFYWNoKGVkaXRvciA9PiB0aGlzLm1hcmtIaW50c0ZvckVkaXRvcihlZGl0b3IsIHBhcmFtcy5yYW5nZXMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1hcmtIaW50c0ZvckVkaXRvcihlZGl0b3I6IFRleHRFZGl0b3IsIHJhbmdlczogUmFuZ2VbXSkge1xuICAgICAgICBlZGl0b3IuZmluZE1hcmtlcnMoQk9PVF9EQVRBX01BUktFUl9UWVBFKS5mb3JFYWNoKG0gPT4gbS5kZXN0cm95KCkpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyYW5nZXMpKSB7XG4gICAgICAgICAgICByYW5nZXMuZm9yRWFjaChyYW5nZSA9PiB0aGlzLmNyZWF0ZUhpbnRNYXJrZXIoZWRpdG9yLCByYW5nZSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGd1dHRlciA9IGVkaXRvci5ndXR0ZXJXaXRoTmFtZShCT09UX0hJTlRfR1VUVEVSX05BTUUpO1xuICAgICAgICBpZiAoZ3V0dGVyKSB7XG4gICAgICAgICAgICBpZiAoIXJhbmdlcyB8fCAhcmFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGd1dHRlci5oaWRlKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFndXR0ZXIuaXNWaXNpYmxlKCkpIHtcbiAgICAgICAgICAgICAgICBndXR0ZXIuc2hvdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVIaW50TWFya2VyKGVkaXRvcjogVGV4dEVkaXRvciwgcmFuZ2U6IFJhbmdlKSB7XG4gICAgICAgIC8vIENyZWF0ZSBtYXJrZXIgbW9kZWxcbiAgICAgICAgY29uc3QgbWFya2VyID0gZWRpdG9yLm1hcmtCdWZmZXJSYW5nZShDb252ZXJ0LmxzUmFuZ2VUb0F0b21SYW5nZShyYW5nZSksIEJPT1RfREFUQV9NQVJLRVJfVFlQRSk7XG5cbiAgICAgICAgLy8gTWFya2VyIGFyb3VuZCB0aGUgdGV4dCBpbiB0aGUgZWRpdG9yXG4gICAgICAgIGVkaXRvci5kZWNvcmF0ZU1hcmtlcihtYXJrZXIsIHtcbiAgICAgICAgICAgIHR5cGU6ICdoaWdobGlnaHQnLFxuICAgICAgICAgICAgY2xhc3M6ICdib290LWhpbnQnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE1hcmtlciBpbiB0aGUgZGlhZ25vc3RpYyBndXR0ZXJcbiAgICAgICAgbGV0IGd1dHRlciA9IGVkaXRvci5ndXR0ZXJXaXRoTmFtZShCT09UX0hJTlRfR1VUVEVSX05BTUUpO1xuICAgICAgICBpZiAoIWd1dHRlcikge1xuICAgICAgICAgICAgZ3V0dGVyID0gZWRpdG9yLmFkZEd1dHRlcih7XG4gICAgICAgICAgICAgICAgbmFtZTogQk9PVF9ISU5UX0dVVFRFUl9OQU1FLFxuICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWNvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIGljb25FbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZ3V0dGVyLWJvb3QtaGludCcpO1xuICAgICAgICBndXR0ZXIuZGVjb3JhdGVNYXJrZXIobWFya2VyLCB7aXRlbTogaWNvbkVsZW1lbnR9KTtcbiAgICB9XG59Il19